import { saveMessage } from "../services";
import { verifyToken } from "../utils";

let onlineUsersMap = new Map();

export const chatSpaceAuthentication = (socket, next) => {
  const token = socket.handshake.headers["x-auth"];
  try {
    const isVerified = verifyToken(token);
    socket.handshake.user = isVerified?.sub;
    return next();
  } catch (error) {
    return next(new Error("Authentication failed"));
  }
};

export const chatSpaceConnection = (socket) => {
  //Key is the mongoId of user and value is the id generated by socket.
  onlineUsersMap.set(socket.handshake.user, socket.id);
  socket.on("send_message", (data) => onMessageSend(data, socket));
  //Deleting the user from the map once he disconnects.
  socket.on("disconnect", () => onUserDisconnect(socket));
};

//Event Handlers
const onUserDisconnect = (socket) => {
  try {
    [...onlineUsersMap.entries()].forEach(([key, value]) => {
      if (value === socket.id) {
        onlineUsersMap.delete(key);
        return;
      }
    });
    socket.disconnect();
  } catch (error) {
    socket.emit("error_disconnecting", { message: error?.message });
  }
};

const onMessageSend = async (data, socket) => {
  try {
    //Saving message to database.
    const newMessage = {
      sender: socket?.handshake?.user,
      receiver: data?.receiver,
      message: data?.message,
    };
    await saveMessage(newMessage);
    //Emitting event to user receiver if he's online.
    const receiver = onlineUsersMap.get(data?.receiver);
    if (receiver) {
      const payload = {
        receiver: data?.receiver, //Mongo id of receiver
        sender: socket?.handshake?.user, //Mongo id of sender
        message: data.message,
      };
      socket.to(receiver).emit("receive_message", payload);
    }
  } catch (error) {
    socket.emit("message_error", { message: error?.message });
  }
};
